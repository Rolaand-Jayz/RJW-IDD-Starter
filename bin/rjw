#!/usr/bin/env python3
"""Minimal 'rjw' CLI for novices.

Commands:
- init: create venv and install deps
- guard: run scripts/checks/run_checks.sh
- check-ledgers: run scripts/validate_ledgers.py if present (fallback prints path)
"""
import argparse
import subprocess
import sys
from pathlib import Path

ROOT = Path(__file__).resolve().parents[1]

def run(cmd, **kwargs):
    print(f"$ {cmd}")
    return subprocess.run(cmd, shell=True, check=False, **kwargs)

def cmd_init(args):
    venv = ROOT / '.venv'
    print('Creating venv at', venv)
    run(f'python3 -m venv "{venv}"')
    activate = '.venv/bin/activate'
    print('To activate your venv: source .venv/bin/activate')

def cmd_guard(args):
    rc = run('bash scripts/checks/run_checks.sh')
    sys.exit(rc.returncode)

def cmd_check_ledgers(args):
    script = ROOT / 'scripts' / 'validate_ledgers.py'
    if script.exists():
        run(f'python "{script}"')
    else:
        print('No ledger validator present; please use scripts/validate_ids.py or add validate_ledgers.py')

def cmd_mcp_scan(args):
    """Scan the local system for installed MCP/agent CLI executables and report operability."""
    detector = ROOT / 'scripts' / 'tools' / 'mcp_detector.py'
    if detector.exists():
        run(f'python "{detector}"')
    else:
        print('No MCP detector present (scripts/tools/mcp_detector.py).')

def main():
    p = argparse.ArgumentParser(prog='rjw')
    sub = p.add_subparsers(dest='cmd')
    sub.add_parser('init')
    sub.add_parser('guard')
    sub.add_parser('check-ledgers')
    sub.add_parser('mcp-scan')
    args = p.parse_args()
    if args.cmd == 'init':
        cmd_init(args)
    elif args.cmd == 'guard':
        cmd_guard(args)
    elif args.cmd == 'check-ledgers':
        cmd_check_ledgers(args)
    elif args.cmd == 'mcp-scan':
        cmd_mcp_scan(args)
    else:
        p.print_help()

if __name__ == '__main__':
    main()
