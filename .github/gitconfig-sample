# Sample Git Configuration for RJW-IDD Projects
# Save as ~/.gitconfig or merge into your existing configuration
# Related: DOC-0021 â€” Git Setup & Configuration Standard

[user]
    # REQUIRED: Set your identity
    name = Your Full Name
    email = your.email@example.com
    
    # OPTIONAL: GPG signing for verified commits
    # signingkey = YOUR_GPG_KEY_ID

[core]
    # Editor for commit messages and interactive operations
    editor = code --wait  # VS Code (adjust for your editor)
    # editor = vim
    # editor = nano
    
    # Line ending normalization
    autocrlf = input  # Linux/Mac (use 'true' on Windows)
    
    # Personal ignore file (create ~/.gitignore_global)
    excludesfile = ~/.gitignore_global
    
    # File mode changes (usually want false on Windows)
    filemode = true
    
    # Handle unicode filenames
    quotepath = false

[init]
    # Default branch name for new repositories
    defaultBranch = main

[pull]
    # Rebase by default instead of merge (cleaner history)
    rebase = true

[push]
    # Push current branch to same-named remote branch
    default = current
    
    # Automatically set up remote tracking
    autoSetupRemote = true
    
    # Push tags with commits
    followTags = true

[fetch]
    # Remove deleted remote branches automatically
    prune = true
    
    # Prune tags as well
    pruneTags = false

[rebase]
    # Automatically stash before rebase
    autoStash = true
    
    # Auto-squash commits marked with 'fixup!' or 'squash!'
    autoSquash = true

[diff]
    # Better diff algorithm
    algorithm = histogram
    
    # Detect renames and copies
    renames = copies
    
    # Word-level diff for better readability
    wordRegex = .
    
    # Show submodule changes
    submodule = log

[merge]
    # Include common ancestor in conflict markers
    conflictStyle = diff3
    
    # Tool for resolving conflicts
    # tool = vscode
    
[mergetool "vscode"]
    cmd = code --wait $MERGED

[commit]
    # Show diff in commit message editor
    verbose = true
    
    # OPTIONAL: Auto-sign commits with GPG
    # gpgsign = true
    
    # Template for commit messages (create ~/.gitmessage)
    # template = ~/.gitmessage

[status]
    # Show untracked files individually in directories
    showUntrackedFiles = all
    
    # Show submodule summary
    submoduleSummary = true

[log]
    # Show commit dates in ISO format
    date = iso
    
    # Abbreviate commit hashes
    abbrevCommit = true

[color]
    # Enable colors in terminal
    ui = auto
    
[color "branch"]
    current = yellow bold
    local = green
    remote = cyan

[color "diff"]
    meta = yellow
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red reverse

[color "status"]
    added = green
    changed = yellow
    untracked = red

# Git aliases - shortcuts for common operations
[alias]
    # Status
    st = status -sb
    s = status
    
    # Commit
    ci = commit
    cm = commit -m
    amend = commit --amend --no-edit
    
    # Branch operations
    br = branch
    co = checkout
    cob = checkout -b
    sw = switch
    
    # Diff operations
    d = diff
    ds = diff --staged
    dw = diff --word-diff
    
    # Log operations
    l = log --oneline --graph --decorate
    lg = log --graph --oneline --decorate --all
    last = log -1 HEAD --stat
    lp = log --pretty=format:'%C(yellow)%h%C(reset) %C(blue)%ad%C(reset) %C(green)%an%C(reset) %s' --date=short
    
    # Stash operations
    stash-all = stash save --include-untracked
    stash-pop = stash pop
    stash-list = stash list
    
    # Undo operations
    unstage = reset HEAD --
    undo = reset --soft HEAD~1
    uncommit = reset --soft HEAD~1
    
    # Clean operations
    clean-branches = !git branch --merged | grep -v '\\*\\|main\\|develop' | xargs -n 1 git branch -d
    prune-branches = fetch --prune
    
    # RJW-IDD specific aliases
    rjw-status = !git status -sb && echo "\n=== Changes from main ===" && git diff --name-status origin/main...HEAD
    rjw-test = !bash scripts/ci/test_gate.sh
    rjw-guards = !bash scripts/ci/test_gate.sh
    rjw-log = log --grep="change-" --oneline
    rjw-since = !git log --oneline --since=\"$(date -d 'yesterday' +%Y-%m-%d)\"
    
    # Useful inspection
    contributors = shortlog --summary --numbered --email
    changed-files = diff --name-only
    new-files = ls-files --others --exclude-standard
    
    # Find commits by message
    find = log --all --oneline --grep
    
    # Show commit with diff
    show-commit = show --stat --pretty=fuller
    
    # List aliases
    aliases = config --get-regexp alias

[help]
    # Autocorrect typos after 2 seconds
    autocorrect = 20

[credential]
    # Cache credentials (adjust timeout as needed)
    helper = cache --timeout=3600
    # Or use OS keychain:
    # helper = osxkeychain  # Mac
    # helper = manager      # Windows

[url "git@github.com:"]
    # Use SSH instead of HTTPS for GitHub
    # insteadOf = https://github.com/

[filter "lfs"]
    # Git LFS configuration (if using large files)
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true

[includeIf "gitdir:~/work/"]
    # Include work-specific config when in work directory
    path = ~/.gitconfig-work

# Performance optimizations
[gc]
    auto = 256

[pack]
    threads = 0  # Use all available cores

# Protocol settings
[protocol]
    version = 2

# GitHub-specific settings
[github]
    user = your-github-username

# GPG signing (optional)
# [gpg]
#     program = gpg

# Submodule settings
[submodule]
    recurse = true

# Branch descriptions (for git branch --edit-description)
[branch]
    autosetupmerge = true
    autosetuprebase = always
